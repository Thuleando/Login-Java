<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="Unlock_SP" directorySegmentName="seg_0" id="23655978-5B98-D777-4239-8BC25C9A3821">
<createdBy>Shelley</createdBy>
<createdTime>2014-11-20 04:01:10 UTC</createdTime>
<ownerDesignName>Login_Authenticator2</ownerDesignName>
<source>create or replace PROCEDURE Unlock_SP &lt;br/&gt;                          (&lt;br/&gt;                            ACCOUNTID_IN  IN NUMBER,&lt;br/&gt;                            REASONID_IN   IN NUMBER,&lt;br/&gt;                            RESULT        OUT NUMBER &lt;br/&gt;                          )&lt;br/&gt;IS&lt;br/&gt;&lt;br/&gt;  ACCOUNTID_NOT_FOUND     EXCEPTION;&lt;br/&gt;  ACCOUNT_NOT_LOCKED      EXCEPTION;&lt;br/&gt;  REASONID_NOT_FOUND      EXCEPTION;&lt;br/&gt;&lt;br/&gt;  IsLocked                Accounts.LockStatus%TYPE := &apos;N&apos;;&lt;br/&gt;  ValidAccount            NUMERIC(2) NOT NULL := 0;&lt;br/&gt;  ValidReason             NUMERIC(2) NOT NULL := 0;&lt;br/&gt;&lt;br/&gt;BEGIN&lt;br/&gt;&lt;br/&gt;  SELECT COUNT(Accounts.ID) INTO ValidAccount FROM Accounts&lt;br/&gt;  WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  IF (ValidAccount) = 0 THEN&lt;br/&gt;    RAISE ACCOUNTID_NOT_FOUND;&lt;br/&gt;  END IF;&lt;br/&gt;  &lt;br/&gt;  SELECT Accounts.LockStatus INTO IsLocked FROM Accounts&lt;br/&gt;  WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  IF IsLocked = &apos;N&apos; THEN&lt;br/&gt;    RAISE ACCOUNT_NOT_LOCKED;&lt;br/&gt;  END IF;&lt;br/&gt;&lt;br/&gt;  SELECT COUNT(EventReasons.ID) INTO ValidReason FROM EventReasons&lt;br/&gt;  WHERE EventReasons.ID = REASONID_IN&lt;br/&gt;  AND EventReasons.ReasonType = &apos;U&apos;;&lt;br/&gt;  IF (ValidReason) = 0 THEN&lt;br/&gt;    RAISE REASONID_NOT_FOUND;&lt;br/&gt;  END IF;&lt;br/&gt;&lt;br/&gt;  UPDATE Accounts&lt;br/&gt;    SET LockStatus = &apos;N&apos;&lt;br/&gt;    WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  INSERT INTO LockEvents (Accounts_ID, EventType, EventReasons_ID) VALUES (ACCOUNTID_IN, &apos;U&apos;, REASONID_IN);&lt;br/&gt;  DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; unlocked.&apos;);&lt;br/&gt;  RESULT := 1;&lt;br/&gt;&lt;br/&gt;EXCEPTION&lt;br/&gt;  WHEN ACCOUNTID_NOT_FOUND THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; does not exist.&apos;);&lt;br/&gt;    RESULT := 2;&lt;br/&gt;  WHEN ACCOUNT_NOT_LOCKED THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; is already unlocked.&apos;);&lt;br/&gt;    RESULT := 3;&lt;br/&gt;  WHEN REASONID_NOT_FOUND THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;EventReason #&apos; || REASONID_IN || &apos; is not a valid unlock reason.&apos;);&lt;br/&gt;    RESULT := 4;&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);&lt;br/&gt;    RESULT := 5;&lt;br/&gt;&lt;br/&gt;END Unlock_SP;</source>
<body>create or replace PROCEDURE Unlock_SP &lt;br/&gt;                          (&lt;br/&gt;                            ACCOUNTID_IN  IN NUMBER,&lt;br/&gt;                            REASONID_IN   IN NUMBER,&lt;br/&gt;                            RESULT        OUT NUMBER &lt;br/&gt;                          )&lt;br/&gt;IS&lt;br/&gt;&lt;br/&gt;  ACCOUNTID_NOT_FOUND     EXCEPTION;&lt;br/&gt;  ACCOUNT_NOT_LOCKED      EXCEPTION;&lt;br/&gt;  REASONID_NOT_FOUND      EXCEPTION;&lt;br/&gt;&lt;br/&gt;  IsLocked                Accounts.LockStatus%TYPE := &apos;N&apos;;&lt;br/&gt;  ValidAccount            NUMERIC(2) NOT NULL := 0;&lt;br/&gt;  ValidReason             NUMERIC(2) NOT NULL := 0;&lt;br/&gt;&lt;br/&gt;BEGIN&lt;br/&gt;&lt;br/&gt;  SELECT COUNT(Accounts.ID) INTO ValidAccount FROM Accounts&lt;br/&gt;  WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  IF (ValidAccount) = 0 THEN&lt;br/&gt;    RAISE ACCOUNTID_NOT_FOUND;&lt;br/&gt;  END IF;&lt;br/&gt;  &lt;br/&gt;  SELECT Accounts.LockStatus INTO IsLocked FROM Accounts&lt;br/&gt;  WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  IF IsLocked = &apos;N&apos; THEN&lt;br/&gt;    RAISE ACCOUNT_NOT_LOCKED;&lt;br/&gt;  END IF;&lt;br/&gt;&lt;br/&gt;  SELECT COUNT(EventReasons.ID) INTO ValidReason FROM EventReasons&lt;br/&gt;  WHERE EventReasons.ID = REASONID_IN&lt;br/&gt;  AND EventReasons.ReasonType = &apos;U&apos;;&lt;br/&gt;  IF (ValidReason) = 0 THEN&lt;br/&gt;    RAISE REASONID_NOT_FOUND;&lt;br/&gt;  END IF;&lt;br/&gt;&lt;br/&gt;  UPDATE Accounts&lt;br/&gt;    SET LockStatus = &apos;N&apos;&lt;br/&gt;    WHERE Accounts.ID = ACCOUNTID_IN;&lt;br/&gt;  INSERT INTO LockEvents (Accounts_ID, EventType, EventReasons_ID) VALUES (ACCOUNTID_IN, &apos;U&apos;, REASONID_IN);&lt;br/&gt;  DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; unlocked.&apos;);&lt;br/&gt;  RESULT := 1;&lt;br/&gt;&lt;br/&gt;EXCEPTION&lt;br/&gt;  WHEN ACCOUNTID_NOT_FOUND THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; does not exist.&apos;);&lt;br/&gt;    RESULT := 2;&lt;br/&gt;  WHEN ACCOUNT_NOT_LOCKED THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;Account #&apos; || ACCOUNTID_IN || &apos; is already unlocked.&apos;);&lt;br/&gt;    RESULT := 3;&lt;br/&gt;  WHEN REASONID_NOT_FOUND THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(&apos;EventReason #&apos; || REASONID_IN || &apos; is not a valid unlock reason.&apos;);&lt;br/&gt;    RESULT := 4;&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);&lt;br/&gt;    RESULT := 5;&lt;br/&gt;&lt;br/&gt;END Unlock_SP;</body>
</StoredProcedureOraclev10g>